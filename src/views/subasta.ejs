<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" href="/img/footer_logo.svg" type="image/x-icon">
  <!-- BOOTSTRAP -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <!-- ICON -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <!-- STYLE -->
  <link rel="stylesheet" href="/css/style_subastas.css">
  <title>Inmueble || subasta</title>
  <script src="/socket.io/socket.io.js"></script>
</head>

<body>

  <header>
    <div class="logo"><img src="/img/logo.png" alt=""></div>
    <nav>
      <a href="/">Inicio</a>
      <a href="#about">About</a>
      <a href="/catalogo">Catalogo</a>
      <a href="/#contacto">Contáctenos</a>
    </nav>
    <div class="session">
      <img src="/img/session.svg" alt="">
      <% if (usuario) { %>
        <p class="d-flex align-items-center ">
          <span>Bienvenido, <%= usuario.nombre %></span>
          <button class="btn_menu ms-1" id="btn_menu">
            <i class="bi bi-list"></i>
          </button>
        <div class="menu_desplegable d-flex flex-column justify-content-between">
          <div>
            <div class="cabezera_menu d-flex justify-content-between">
              <h3>Subastas</h3>
              <button id="btn_close">
                <i class="bi bi-x-lg"></i>
              </button>
            </div>
            <ul>
              <li><a href="/logout">Catalogo</a></li>
            </ul>
          </div>
          <div class="perfil_user">
            <div class="d-flex flex-row">
              <i class="bi bi-person-bounding-box" style="font-size: 2.5rem; color: #fff; margin-right: 1rem;"></i>
              <div class="d-flex flex-column">
                <strong>Usuario</strong>
                <small>
                  <%= usuario.nombre %>
                </small>
                <a href="/logout" class="btn btn-danger btn-sm ms-2">Cerrar Sesión</a>
              </div>
            </div>
          </div>
          </p>
          <% } else { %>
            <p>
              <span>
                <a href="/login">Login</a>
              </span>
              <span>/</span>
              <span>
                <a href="/registro">Sign up</a>
              </span>
            </p>
            <% } %>
        </div>
  </header>

  <div class="detalles_subasta d-flex justify-content-center">
    <div class="property-detail">
      <!-- Carrusel e información del inmueble -->
      <div id="carouselExample<%= subasta.id %>" class="carousel slide slider">
        <div class="max-w-4xl mx-auto rounded-lg overflow-hidden content_galeria">
          <div id="imagen_principal" class="imgen_principal">
            <img class="img_principal rounded-lg" src="" alt="">
          </div>
          <div class="galeria scroll-1">
            <% subasta.imagenes.forEach((imagen, index)=> { %>
              <div class="img_wrapper">
                <img class="imgs rounded-lg" src="data:image/jpeg;base64, <%= imagen %>" alt="">
              </div>
              <% }); %>
          </div>
        </div>




      </div>
      <div class="property-details-content">
        <div class="content_title">
          <h4>Información general</h4>
        </div>

        <div class="d-flex flex-column align-items-center content_info_subastas">
          <div class="nombre_tipo">
            <h3 class="d-flex justify-content-between">
              <span>Propiedad:</span>
              <span>
                <%= subasta.nombre_propiedad %>
              </span>
            </h3>
            <p class="d-flex justify-content-between">
              <span>Categoria:</span>
              <span>
                <%= subasta.categoria %>
              </span>
            </p>
          </div>

          <div class="features">
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Baños</span>
                <span>
                  <%= subasta.N_baños %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Cuartos</span>
                <span>
                  <%= subasta.N_cuartos %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Cocinas</span>
                <span>
                  <%= subasta.N_cocina %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Cuartos</span>
                <span>
                  <%= subasta.N_cocheras %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>Patio</span>
                <span>
                  <%= subasta.patio%>
                </span>
              </p>
            </div>
          </div>

          <div class="imagenes">
            <p class="d-flex justify-content-between">
              <span>Unicacion</span>
              <span>
                <%= subasta.direccion %>
              </span>
            </p>
          </div>

          <div class="content_descripcion">
            <h5>
              Descripcion de propiedad
            </h5>
            <p>
              <span>
                <%= subasta.descripcion %>
              </span>
            </p>
          </div>
        </div>
      </div>
    </div>


    <div class="card">
      <div class="card-header">
        <div>
          <p>Inicia<br>VIERNES 05</p>
        </div>
        <div>
          <p>02:00 pm</p>
        </div>
      </div>

      <div class="card-body" id="body_card">
        <h2>¡Oportunidad para el que sabe!</h2>
        <button id="participar">PARTICIPA</button>
        <p class="precio d-flex align-items-center justify-content-center">
          <i class="bi bi-cash-coin d-flex"></i>
          <span class="precio_base">Precio base:</span>
          <span class="price">US$<%= formatNumber(subasta.precio_base) %></span>
        </p>

      </div>
      <!-- Chat de pujas -->
      <div id="chat" class="chat">
        <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0"
          aria-valuemax="100">
          <div class="progress-bar" id="progressBar" style="width: 100%"></div>
        </div>
        <div id="messages" class="messages"></div>
        <div class="content_acciones d-flex justify-content-center">
          <div class="mensaje">
            <button class="btn-minus" id="menos">
              <i class="bi bi-dash-circle"></i>
            </button>
            <input type="text" id="messageInput" placeholder="Puja" class="input_mensaje" />
            <button class="btn-plus">
              <i class="bi bi-plus-circle" id="mas"></i>
            </button>
          </div>
          <button id="sendButton" class=" btn_enviar">Enviar</button>
        </div>
      </div>
    </div>
  </div>

  <!-- SCRIPT -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- <script src="https://cdn.jsdelivr.net/npm/tsparticles@2"></script> -->
  <script src="https://cdn.jsdelivr.net/npm/@tsparticles/confetti@3.0.3/tsparticles.confetti.bundle.min.js"></script>

  <script>
    const socket = io();

    const messages = document.getElementById('messages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const btnMas = document.getElementById('mas');
    const btnMenos = document.getElementById('menos');
    const progressBar = document.getElementById('progressBar');

    let currentBid = parseInt('<%= subasta.precio_base %>');
    let minBid = currentBid; // Guardar la puja mínima permitida

    // Función para enviar latidos al servidor cada 5 segundos
    setInterval(() => {
      socket.emit('heartbeat', auctionRoom); // Enviar un latido al servidor
    }, 5000); // Enviar cada 5 segundos

    const auctionRoom = '<%= subasta.id %>';
    socket.emit('joinRoom', auctionRoom);

    messageInput.value = formatNumber(currentBid + 100);

    let progressInterval;
    let progressValue = 100;
    let auctionCount = 0;
    let auctionInProgress = false; // Variable para controlar si la subasta está en progreso
    let auctionEnded = false; // Variable para controlar si la subasta ha terminado

    function startProgressBar() {
      if (auctionEnded) return; // No iniciar la barra de progreso si la subasta ha terminado

      progressValue = 100;
      auctionCount = 0;
      progressBar.style.width = `${progressValue}%`;

      if (progressInterval) {
        clearInterval(progressInterval);
      }

      auctionInProgress = true; // Indicar que la subasta está en progreso

      progressInterval = setInterval(() => {
        progressValue -= 1;
        progressBar.style.width = `${progressValue}%`;

        if (progressValue <= 50 && auctionCount === 0) {
          auctionCount = 1;
          addAuctionMessage("a la 1");
        } else if (progressValue <= 25 && auctionCount === 1) {
          auctionCount = 2;
          addAuctionMessage("a las 2");
        } else if (progressValue <= 0 && auctionCount === 2) {
          auctionCount = 3;
          addAuctionMessage("a las 3");
          clearInterval(progressInterval);
          if (auctionInProgress) {
            auctionInProgress = false; // Finalizar la subasta
            auctionEnded = true; // Marcar la subasta como terminada
            socket.emit('endAuction', auctionRoom); // Notificar al servidor que la subasta ha terminado
            disableButtons(); // Desactivar los botones
          }
        }
      }, 50); // Ajusta la velocidad de la barra de progreso según sea necesario
    }

    function addAuctionMessage(text) {
      const messageElement = document.createElement('div');
      messageElement.textContent = text;
      messages.appendChild(messageElement);
      messages.scrollTop = messages.scrollHeight;
    }

    btnMas.addEventListener('click', function () {
      if (auctionEnded) return; // No permitir cambios si la subasta ha terminado

      let currentBidValue = parseInt(messageInput.value.replace(/,/g, ''));
      currentBidValue += 100;
      messageInput.value = formatNumber(currentBidValue);
      minBid = currentBidValue; // Actualizar la puja mínima permitida
    });

    btnMenos.addEventListener('click', function () {
      if (auctionEnded) return; // No permitir cambios si la subasta ha terminado

      let currentBidValue = parseInt(messageInput.value.replace(/,/g, ''));
      if (currentBidValue > minBid) {
        currentBidValue -= 100;
        if (currentBidValue < minBid) {
          currentBidValue = minBid;
        }
        messageInput.value = formatNumber(currentBidValue);
      }
    });

    sendButton.addEventListener('click', function () {
      if (auctionEnded) return; // No permitir envíos si la subasta ha terminado

      let bidValue = parseInt(messageInput.value.replace(/,/g, ''));

      // Verificar que la puja no sea menor que la puja mínima permitida
      if (bidValue < minBid) {

        Swal.fire({
          title: `La puja debe ser al menos $${formatNumber(minBid)}.`,
          icon: "warning",

        });
        return;
      }

      socket.emit('bid', {
        user: '<%= usuario ? usuario.nombre : "Invitado" %>',
        bid: bidValue,
        room: auctionRoom
      });
      startProgressBar();
    });

    socket.on('newBid', function (data) {
      if (auctionEnded) return; // No aceptar nuevas pujas si la subasta ha terminado

      currentBid = parseInt(data.bid); // Actualizar la puja actual
      minBid = currentBid; // Actualizar la puja mínima permitida

      const messageElement = document.createElement('div');
      messageElement.textContent = `Puja de $${formatNumber(data.bid)} por ${data.user}`;
      messages.appendChild(messageElement);
      messages.scrollTop = messages.scrollHeight;

      // Actualizar el input de todos los clientes
      messageInput.value = formatNumber(currentBid);
      clearInterval(progressInterval);
      startProgressBar();
    });

    socket.on('auctionEnded', function (data) {
      const messageElement = document.createElement('div');

      // Verificar que data.winner no sea null o undefined
      const winnerName = data.winner || 'un participante desconocido';

      Swal.fire({
        icon: 'success',
        title: `¡Subasta ganada por ${winnerName}!`,
        text: 'Felicidades, vamos por otra subasta',
        confirmButtonText: 'Ir al catálogo',
        allowOutsideClick: false,
        customClass: {
          confirmButton: 'bg-btn-alert2',
        },
        didOpen: () => {
          const end = Date.now() + 15 * 1000;
          const colors = ["#ff0000", "#fbff00", "#04ff04"];

          (function frame() {
            confetti({
              particleCount: 2,
              angle: 60,
              spread: 55,
              origin: { x: 0 },
              colors: colors,
            });

            confetti({
              particleCount: 2,
              angle: 120,
              spread: 55,
              origin: { x: 1 },
              colors: colors,
            });

            confetti({
              particleCount: 2,
              angle: 180,
              apread: 55,
              origin: { x: 2 },
              colors: colors,
            });

            if (Date.now() < end) {
              requestAnimationFrame(frame);
            }
          })();
        },
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = '/catalogo'; // Redirige a /catalogo
        }
      });

      messages.appendChild(messageElement);
      messages.scrollTop = messages.scrollHeight;
      disableButtons(); // Desactivar los botones
    });

    const currentUserId = '<%= usuario ? usuario.id : "null" %>';
    console.log('Current User ID:', currentUserId);

    socket.on('intentosActivados', function (data) {
      console.log('Evento intentosActivados recibido con datos:', data);
      const usuarioId = data.usuarioId;

      if (usuarioId === currentUserId) {
        Swal.fire({
          title: 'Intentos Activados',
          text: 'Tus intentos para participar en las subastas han sido activados.',
          icon: 'success',
          confirmButtonText: 'OK'
        });
      }
    });

    messageInput.addEventListener('keypress', function (event) {
      if (event.key === 'Enter') {
        sendButton.click();
      }
    });

    function disableButtons() {
      btnMas.disabled = true;
      btnMenos.disabled = true;
      sendButton.disabled = true;
      messageInput.disabled = true;
    }

    function formatNumber(num) {
      return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }

  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const botonActivar = document.getElementById("btn_menu");
      const botonCerrar = document.getElementById("btn_close");
      const contenederMenu = document.getElementsByClassName("menu_desplegable")[0];

      botonActivar.addEventListener('click', () => {
        contenederMenu.classList.add("active");
      });

      botonCerrar.addEventListener('click', () => {
        contenederMenu.classList.remove("active");
      });
    });
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', (event) => {
      const mainImage = document.querySelector('#imagen_principal img');
      const galleryImages = document.querySelectorAll('.galeria .imgs');

      // Iniciar con la primera imagen de la galería
      if (galleryImages.length > 0) {
        mainImage.src = galleryImages[0].src;
        mainImage.alt = galleryImages[0].alt;
        galleryImages[0].classList.add('active'); // Añadir clase 'active' a la primera imagen
      }

      galleryImages.forEach(image => {
        image.addEventListener('click', () => {
          // Remueve la clase 'active' de todas las imágenes de la galería
          galleryImages.forEach(img => img.classList.remove('active'));

          // Agrega la clase 'active' a la imagen clicada
          image.classList.add('active');

          // Cambia la imagen y el alt de la imagen principal por los de la imagen clicada
          mainImage.src = image.src;
          mainImage.alt = image.alt;

          // Desplaza la ventana para mostrar la imagen principal
          //mainImage.scrollIntoView({ behavior: 'smooth', block: 'start' });
        });
      });
    });
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const btnIniciarChat = document.getElementById('participar');
      const chat = document.getElementById('chat');
      const cardBody = document.getElementById('body_card');

      btnIniciarChat.addEventListener('click', async () => {
        console.log('se realizó clic');

        // Mostrar SweetAlert2 para los términos y condiciones
        const { value: accept } = await Swal.fire({
          title: "Términos y condiciones",
          html: `<iframe src="/img/TÉRMINOS Y CONDICIONES PARA EL PROCESO DE REMATE ELECTRÓNICO (1).pdf" frameborder="0" style="width: 100%; height: 500px;"></iframe>
    <br>
    <input type="checkbox" id="terms-checkbox">
    <label for="terms-checkbox">Acepto los términos y condiciones</label>`,
          showCancelButton: true,
          confirmButtonText: 'Continuar&nbsp;<i class="fa fa-arrow-right"></i>',
          cancelButtonText: 'Cancelar',
          preConfirm: () => {
            const checkbox = document.querySelector('#terms-checkbox');
            if (!checkbox.checked) {
              Swal.showValidationMessage("Debes aceptar los términos y condiciones");
            }
            return checkbox.checked;
          },
          customClass: {
            htmlContainer: 'custom-html-container'
          }
        });

        // Si el usuario aceptó los términos, muestra el aviso sobre los intentos
        if (accept) {
          const attemptsAvailable = await checkAttempts(); // Función que verifica los intentos

          if (attemptsAvailable) {
            Swal.fire({
              title: 'Bienvenido a la Subasta',
              text: 'Ya tienes tus oportunidades para participar en la subasta.',
              icon: 'success',
              confirmButtonText: 'Ir a la subasta'
            }).then(() => {
              chat.classList.add('active');
              cardBody.classList.add('active');
            });
          } else {
            Swal.fire({
              title: 'Espera',
              text: 'No tienes intentos disponibles aún. Te notificaremos cuando tengas intentos para participar.',
              icon: 'info',
              confirmButtonText: 'Ir al catálogo'
            }).then(() => {
              window.location.href = '/catalogo'; // Redirige al catálogo
            });
          }
        } else {
          Swal.fire("No has aceptado los términos y condiciones");
        }
      });

      // Función simulada para verificar intentos disponibles
      async function checkAttempts() {
        // Simula la verificación de intentos disponibles. En un escenario real, aquí realizarías una solicitud al servidor.
        // Retorna true o false según el estado de los intentos del usuario.
        // Por ejemplo, puedes usar una API para verificar el estado real de los intentos.

        // Para efectos de demostración, se puede ajustar esto según sea necesario
        return new Promise((resolve) => {
          setTimeout(() => {
            const hasAttempts = confirm("¿Simulación: ¿Tienes al menos un intento disponible?"); // Simulación
            resolve(hasAttempts);
          }, 1000);
        });
      }






    });
  </script>


</body>
<!--       /* const fechaSubasta = '<%= subasta.fecha_formateada %>';

      console.log(`Fecha de DB: ${fechaSubasta}`);

      const fechaActual = new Date();
      const dia = String(fechaActual.getDate()).padStart(2, '0');
      const mes = String(fechaActual.getMonth() + 1).padStart(2, '0'); // Los meses en JavaScript van de 0 a 11
      const año = fechaActual.getFullYear();

      const fechaFormateada = `${dia}/${mes}/${año}`;
      console.log(`Fecha de JS: ${fechaFormateada}`); */


      /* if (fechaSubasta == fechaFormateada) {
        console.log("estas en fecha de subasta");
      } else if (fechaSubasta > fechaFormateada) {
        console.log("faltan dias para la subasta");
      } else if (fechaSubasta < fechaFormateada) {
        console.log("paso la fecha de la subasta");
      } else {
        console.log("no se optuvo la fecha");
      } */
 -->

</html>