<!DOCTYPE html> <!-- Declara que este documento es HTML5 -->
<html lang="en"> <!-- Inicio del documento HTML, especificando el idioma como inglés -->
<head> <!-- Inicio de la sección de cabecera del documento -->
  <meta charset="UTF-8"> <!-- Define la codificación de caracteres del documento como UTF-8 -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Configura la vista para dispositivos móviles -->
  <link rel="shortcut icon" href="/img/footer_logo.svg" type="image/x-icon"> <!-- Define el icono de la pestaña del navegador -->
  <link rel="stylesheet" href="/css/style_login.css"> <!-- Enlaza la hoja de estilos CSS personalizada -->
  <script src="https://www.google.com/recaptcha/api.js" async defer></script> <!-- Carga el script de reCAPTCHA de Google -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"> <!-- Enlaza los iconos de Bootstrap -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"> <!-- Enlaza los estilos de Bootstrap -->
  <title>Subastas online | login</title> <!-- Define el título de la página -->
</head>

<body> <!-- Inicio del cuerpo del documento -->
  <div class="contenedor"> <!-- Contenedor principal -->
    <div class="imagen slideInLeft"> <!-- Sección de imagen con animación de deslizamiento -->
      <a class="regreso" href="/"> <!-- Enlace para regresar a la página principal -->
        <img src="/img/regresar.svg" alt=""> <!-- Imagen del botón de regreso -->
      </a>
      <img class="imagen_fondo" src="/img/banner_login_3.jpeg" alt=""> <!-- Imagen de fondo -->
    </div>
    
    <div class="fondo"> <!-- Sección de fondo -->
      <div class="content_form slideInLeft"> <!-- Contenedor del formulario con animación -->
        <h2>Inicio de sesión</h2> <!-- Título del formulario -->
        
        <form action="/login" class="slideInLeft" method="POST" id="loginForm"> <!-- Formulario de inicio de sesión -->
          <label for="usuario">Usuario*</label> <!-- Etiqueta para el campo de usuario -->
          <input type="text" name="usuario" id="usuario" placeholder="Ingresa tu Usuario" required> <!-- Campo de entrada para el usuario -->
          
          <div class="content_contra"> <!-- Contenedor para el campo de contraseña -->
            <label for="contraseña">Contraseña*</label> <!-- Etiqueta para el campo de contraseña -->
            <div class="input-container"> <!-- Contenedor para el input de contraseña y el botón de mostrar/ocultar -->
              <input type="password" name="contra" id="contraseña" placeholder="Ingresa tu Contraseña" required> <!-- Campo de entrada para la contraseña -->
              <button type="button" class="mostarC" id="toggleButton" onclick="mostrar()"> <!-- Botón para mostrar/ocultar contraseña -->
               
              </button>
            </div>
          </div>
          
          <!-- Añadido: Div para el captcha -->
          <div class="mt-1 mx-5"> <!-- Contenedor para el captcha con margen superior -->
            <div class="g-recaptcha" data-sitekey="6Ld5v10qAAAAAJLNFTMiEGGW-fiNln15iEL7t2em"></div> <!-- Widget de reCAPTCHA -->
          </div>
          
          <button type="submit">Iniciar sesión</button> <!-- Botón para enviar el formulario -->
          <a class="registrar" href="/registro">Regístrate</a> <!-- Enlace para registrarse -->
          <a class="regresar" href="/">Ir al inicio</a> <!-- Enlace para volver al inicio -->
        </form>
      </div>
    </div>
  </div>

  <!-- Incluye SweetAlert2 desde un CDN -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> <!-- Carga la biblioteca SweetAlert2 para alertas personalizadas -->

  <!-- Script unificado para el manejo del formulario -->
  <script>
    document.getElementById('loginForm').addEventListener('submit', async function(event) { // Agrega un evento de escucha al formulario
      event.preventDefault(); // Previene el envío por defecto del formulario
      
      // Verificar si el captcha está completo
      const response = grecaptcha.getResponse(); // Obtiene la respuesta del captcha
      if (response === '') { // Si el captcha no está completo
        // Si el captcha no está completo, mostrar un mensaje de error y detener el proceso
        Swal.fire({ // Muestra una alerta de error usando SweetAlert2
          icon: 'error',
          title: 'Error',
          text: 'Por favor, completa el captcha'
        });
        return; // Detiene la ejecución si el captcha no está completo
      }
      
      // Si el captcha está completo, continuar con el proceso de login
      const formData = new FormData(this); // Crea un objeto FormData con los datos del formulario
      const data = { // Crea un objeto con los datos del formulario y el captcha
        usuario: formData.get('usuario'),
        contra: formData.get('contra'),
        captcha: response // Incluir la respuesta del captcha en los datos enviados
      };

      try {
        const responseServer = await fetch('/login', { // Envía una solicitud POST al servidor
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const result = await responseServer.json(); // Convierte la respuesta del servidor a JSON
        
        if (responseServer.ok) { // Si la respuesta del servidor es exitosa
          // Si el login es exitoso
          Swal.fire({ // Muestra una alerta de éxito
            icon: 'success',
            title: 'Login exitoso',
            text: 'Bienvenido ' + data.usuario,
            showConfirmButton: false,
            timer: 1500
          }).then(() => {
            window.location.href = result.redirect; // Redirige al usuario a la página indicada por el servidor
          });
        } else { // Si hay un error en la respuesta del servidor
          // Si hay un error en el login
          Swal.fire({ // Muestra una alerta de error
            icon: 'error',
            title: 'Error',
            text: result.message
          });
        }
      } catch (error) { // Si ocurre un error durante la solicitud
        console.error('Error:', error); // Registra el error en la consola
        // Si hay un error en la solicitud
        Swal.fire({ // Muestra una alerta de error genérica
          icon: 'error',
          title: 'Error',
          text: 'Error al intentar realizar la solicitud'
        });
      }
    });
  </script>

  <script>
    function mostrar() { // Función para mostrar/ocultar la contraseña
      const contra = document.getElementById("contraseña"); // Obtiene el elemento de la contraseña
      const icon = document.getElementById("toggleIcon"); // Obtiene el icono del botón
      
      if (contra.type == "password") { // Si el tipo es "password" (contraseña oculta)
        contra.type = "text"; // Cambia el tipo a "text" para mostrar la contraseña
        icon.classList.remove('bi-eye-slash-fill'); // Remueve el icono de ojo tachado
        icon.classList.add('bi-eye-fill'); // Agrega el icono de ojo
      } else { // Si el tipo es "text" (contraseña visible)
        contra.type = "password"; // Cambia el tipo a "password" para ocultar la contraseña
        icon.classList.remove('bi-eye-fill'); // Remueve el icono de ojo
        icon.classList.add('bi-eye-slash-fill'); // Agrega el icono de ojo tachado
      }
    }
  </script>

</body>
</html>
