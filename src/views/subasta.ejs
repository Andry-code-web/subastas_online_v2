<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" href="/img/footer_logo.svg" type="image/x-icon">
  <!-- BOOTSTRAP -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <!-- ICON -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <!-- STYLE -->
  <link rel="stylesheet" href="/css/style_subastas.css">
  <title>Inmueble || subasta</title>
  <script src="/socket.io/socket.io.js"></script>
</head>

<body>

  <header>
    <div class="logo"><img src="/img/logo.png" alt=""></div>
    <nav>
      <a href="/user/">Inicio</a>
      <a href="#about">About</a>
      <a href="/user/catalogo">Catalogo</a>
      <a href="/user#contacto">Contáctenos</a>
    </nav>
    <div class="session">
      <img src="/img/session.svg" alt="">
      <% if (usuario) { %>
        <p class="d-flex align-items-center ">
          <span>Bienvenido, <%= usuario.nombre %></span>
          <button class="btn_menu ms-1" id="btn_menu">
            <i class="bi bi-list"></i>
          </button>
        <div class="menu_desplegable d-flex flex-column justify-content-between">
          <div>
            <div class="cabezera_menu d-flex justify-content-between">
              <h3>Subastas</h3>
              <button id="btn_close">
                <i class="bi bi-x-lg"></i>
              </button>
            </div>
            <ul>
              <li><a href="/user/logout">Catalogo</a></li>
            </ul>
          </div>
          <div class="perfil_user">
            <div class="d-flex flex-row">
              <i class="bi bi-person-bounding-box" style="font-size: 2.5rem; color: #fff; margin-right: 1rem;"></i>
              <div class="d-flex flex-column">
                <strong>Usuario</strong>
                <small>
                  <%= usuario.nombre %>
                </small>
                <a href="/user/logout" class="btn btn-danger btn-sm ms-2">Cerrar Sesión</a>
              </div>
            </div>
          </div>
          </p>
          <% } else { %>
            <p>
              <span>
                <a href="/user/login">Login</a>
              </span>
              <span>/</span>
              <span>
                <a href="/user/registro">Sign up</a>
              </span>
            </p>
            <% } %>
        </div>
  </header>

  <div class="detalles_subasta d-flex justify-content-center">
    <div class="property-detail">
      <!-- Carrusel e información del inmueble -->
      <div id="carouselExample<%= subasta.id %>" class="carousel slide slider">
        <div class="max-w-4xl mx-auto rounded-lg overflow-hidden content_galeria">
          <div id="imagen_principal" class="imgen_principal">
            <img class="img_principal rounded-lg" src="" alt="">
          </div>
          <div class="galeria scroll-1">
            <% subasta.imagenes.forEach((imagen, index)=> { %>
              <div class="img_wrapper">
                <img class="imgs rounded-lg" src="data:image/jpeg;base64, <%= imagen %>" alt="">
              </div>
              <% }); %>
          </div>
        </div>




      </div>
      <div class="property-details-content">
        <div class="content_title">
          <h4>Información general</h4>
        </div>

        <div class="d-flex flex-column align-items-center content_info_subastas">
          <div class="nombre_tipo">
            <h3 class="d-flex justify-content-between">
              <span>Propiedad:</span>
              <span>
                <%= subasta.nombre_propiedad %>
              </span>
            </h3>
            <p class="d-flex justify-content-between">
              <span>Categoria:</span>
              <span>
                <%= subasta.categoria %>
              </span>
            </p>
          </div>

          <div class="features">
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Baños</span>
                <span>
                  <%= subasta.N_baños %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Cuartos</span>
                <span>
                  <%= subasta.N_cuartos %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Cocinas</span>
                <span>
                  <%= subasta.N_cocina %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>N° Cuartos</span>
                <span>
                  <%= subasta.N_cocheras %>
                </span>
              </p>
            </div>
            <div class="imgenes">
              <p class="d-flex justify-content-between">
                <span>Patio</span>
                <span>
                  <%= subasta.patio%>
                </span>
              </p>
            </div>
          </div>

          <div class="imagenes">
            <p class="d-flex justify-content-between">
              <span>Unicacion</span>
              <span>
                <%= subasta.direccion %>
              </span>
            </p>
          </div>

          <div class="content_descripcion">
            <h5>
              Descripcion de propiedad
            </h5>
            <p>
              <span>
                <%= subasta.descripcion %>
              </span>
            </p>
          </div>
        </div>
      </div>
    </div>


    <div class="card">
      <div class="card-header">
        <div>
          <p>
            Inicia<br>
            <%= subasta.fecha_subasta_formateada %>
          </p>
        </div>
        <div>
          <p>
            <%= subasta.hora_subasta_formateada %>
          </p>
        </div>
      </div>

      <div class="card-body" id="body_card">
        <h2>¡Oportunidad para el que sabe!</h2>
        <button id="participar">PARTICIPA</button>
        <p class="precio d-flex align-items-center justify-content-center">
          <i class="bi bi-cash-coin d-flex"></i>
          <span class="precio_base">Precio base:</span>
          <span class="price">US$<%= formatNumber(subasta.precio_base) %></span>
        </p>
      </div>

      <!-- Chat de pujas -->
      <div id="chat" class="chat">
        <div class="progress" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0"
          aria-valuemax="100">
          <div class="progress-bar" id="progressBar" style="width: 100%"></div>
        </div>
        <div id="messages" class="messages"></div>
        <div class="content_acciones d-flex justify-content-center">
          <div class="mensaje">
            <button class="btn-minus" id="menos" disabled>
              <i class="bi bi-dash-circle"></i>
            </button>
            <input type="text" id="messageInput" placeholder="Puja" class="input_mensaje" disabled />
            <button class="btn-plus" id="mas" disabled>
              <i class="bi bi-plus-circle"></i>
            </button>
          </div>
          <button id="sendButton" class="btn_enviar" disabled>Enviar</button>
        </div>
      </div>
    </div>


    <!-- SCRIPTS -->
    <script>
      const socket = io();

      const messages = document.getElementById('messages');
      const messageInput = document.getElementById('messageInput');
      const sendButton = document.getElementById('sendButton');
      const btnMas = document.getElementById('mas');
      const btnMenos = document.getElementById('menos');
      const progressBar = document.getElementById('progressBar');

      // Función para enviar latidos al servidor cada 5 segundos
      setInterval(() => {
        socket.emit('heartbeat', auctionRoom); // Enviar un latido al servidor
      }, 5000); // Enviar cada 5 segundos

      const auctionRoom = '<%= subasta.id %>';
      socket.emit('joinRoom', auctionRoom);

      const precioBase = '<%= subasta.precio_base %>';
      const precioNum = parseInt(precioBase);
      const precioBaseConIncremento = precioNum + 100;

      messageInput.value = formatNumber(precioBaseConIncremento);

      let progressInterval;
      let progressValue = 100;
      let auctionCount = 0;
      let auctionInProgress = false; // Variable para controlar si la subasta está en progreso
      let auctionEnded = false; // Variable para controlar si la subasta ha terminado

      function startProgressBar() {
        if (auctionEnded) return; // No iniciar la barra de progreso si la subasta ha terminado

        progressValue = 100;
        auctionCount = 0;
        progressBar.style.width = `${progressValue}%`;

        if (progressInterval) {
          clearInterval(progressInterval);
        }

        auctionInProgress = true; // Indicar que la subasta está en progreso

        progressInterval = setInterval(() => {
          progressValue -= 1;
          progressBar.style.width = `${progressValue}%`;

          if (progressValue <= 50 && auctionCount === 0) {
            auctionCount = 1;
            addAuctionMessage("a la 1");
          } else if (progressValue <= 25 && auctionCount === 1) {
            auctionCount = 2;
            addAuctionMessage("a las 2");
          } else if (progressValue <= 0 && auctionCount === 2) {
            auctionCount = 3;
            addAuctionMessage("a las 3");
            clearInterval(progressInterval);
            if (auctionInProgress) {
              auctionInProgress = false; // Finalizar la subasta
              auctionEnded = true; // Marcar la subasta como terminada
              socket.emit('endAuction', auctionRoom); // Notificar al servidor que la subasta ha terminado
              disableButtons(); // Desactivar los botones
            }
          }
        }, 50); // Ajusta la velocidad de la barra de progreso según sea necesario
      }

      function addAuctionMessage(text) {
        const messageElement = document.createElement('div');
        messageElement.textContent = text;
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
      }

      btnMas.addEventListener('click', function () {
        if (auctionEnded) return; // No permitir cambios si la subasta ha terminado

        let currentBid = parseInt(messageInput.value.replace(/,/g, ''));
        currentBid += 100;
        messageInput.value = formatNumber(currentBid);
      });

      btnMenos.addEventListener('click', function () {
        if (auctionEnded) return; // No permitir cambios si la subasta ha terminado

        let currentBid = parseInt(messageInput.value.replace(/,/g, ''));
        if (currentBid > precioNum) {
          currentBid -= 100;
          if (currentBid < precioNum) {
            currentBid = precioNum;
          }
          messageInput.value = formatNumber(currentBid);
        }
      });

      sendButton.addEventListener('click', function () {
        if (auctionEnded) return; // No permitir envíos si la subasta ha terminado

        const bid = messageInput.value.replace(/,/g, '');
        socket.emit('bid', {
          user: '<%= usuario ? usuario.nombre : "Invitado" %>',
          bid: bid,
          room: auctionRoom
        });
        startProgressBar();
      });

      socket.on('newBid', function (data) {
        if (auctionEnded) return; // No aceptar nuevas pujas si la subasta ha terminado

        const messageElement = document.createElement('div');
        messageElement.textContent = `Puja de $${formatNumber(data.bid)} por ${data.user}`;
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
        clearInterval(progressInterval);
        startProgressBar();
      });

      socket.on('auctionEnded', function (data) {
        const messageElement = document.createElement('div');
        messageElement.textContent = `¡Subasta ganada por ${data.winner}!`;
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
        disableButtons(); // Desactivar los botones
      });

      messageInput.addEventListener('keypress', function (event) {
        if (event.key === 'Enter') {
          sendButton.click();
        }
      });

      function disableButtons() {
        btnMas.disabled = true;
        btnMenos.disabled = true;
        sendButton.disabled = true;
        messageInput.disabled = true;
      }

      function formatNumber(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      }
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const botonActivar = document.getElementById("btn_menu");
        const botonCerrar = document.getElementById("btn_close");
        const contenederMenu = document.getElementsByClassName("menu_desplegable")[0];

        botonActivar.addEventListener('click', () => {
          contenederMenu.classList.add("active");
        });

        botonCerrar.addEventListener('click', () => {
          contenederMenu.classList.remove("active");
        });
      });
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', (event) => {
        const mainImage = document.querySelector('#imagen_principal img');
        const galleryImages = document.querySelectorAll('.galeria .imgs');

        // Iniciar con la primera imagen de la galería
        if (galleryImages.length > 0) {
          mainImage.src = galleryImages[0].src;
          mainImage.alt = galleryImages[0].alt;
          galleryImages[0].classList.add('active'); // Añadir clase 'active' a la primera imagen
        }

        galleryImages.forEach(image => {
          image.addEventListener('click', () => {
            // Remueve la clase 'active' de todas las imágenes de la galería
            galleryImages.forEach(img => img.classList.remove('active'));

            // Agrega la clase 'active' a la imagen clicada
            image.classList.add('active');

            // Cambia la imagen y el alt de la imagen principal por los de la imagen clicada
            mainImage.src = image.src;
            mainImage.alt = image.alt;

            // Desplaza la ventana para mostrar la imagen principal
            //mainImage.scrollIntoView({ behavior: 'smooth', block: 'start' });
          });
        });
      });
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const btnIniciarChat = document.getElementById('participar');
        const chat = document.getElementById('chat');
        const cardBody = document.getElementById('body_card');

        btnIniciarChat.addEventListener('click', () => {
          console.log('se realizo click');
          chat.classList.add('active');
          cardBody.classList.add('active');
        });

      });
    </script>

    <!-- <script>
      document.addEventListener("DOMContentLoaded", function () {
        const fechaSubastaStr = '<%= subasta.fecha_subasta_formateada %>T<%= subasta.hora_subasta_formateada %>';
        console.log('Fecha y hora de subasta recibida:', fechaSubastaStr);

        // Intentar parsear la fecha
        const fechaSubasta = new Date(fechaSubastaStr);

        console.log('Fecha de subasta parseada:', fechaSubasta);

        const participarButton = document.getElementById("participar");
        const messageInput = document.getElementById("messageInput");
        const sendButton = document.getElementById("sendButton");
        const menosButton = document.getElementById("menos");
        const masButton = document.getElementById("mas");

        function actualizarEstadoParticipacion() {
          const now = new Date();

          console.log('Fecha actual:', now);
          console.log('Fecha de subasta:', fechaSubasta);

          if (now >= fechaSubasta) {
            console.log('Habilitando participación');
            participarButton.disabled = false;
            messageInput.disabled = false;
            sendButton.disabled = false;
            menosButton.disabled = false;
            masButton.disabled = false;
          } else {
            console.log('Deshabilitando participación');
            participarButton.disabled = true;
            messageInput.disabled = true;
            sendButton.disabled = true;
            menosButton.disabled = true;
            masButton.disabled = true;
          }
        }

        //actualizarEstadoParticipacion();
        //setInterval(actualizarEstadoParticipacion, 60000); // Verificar cada minuto
      });
    </script> -->

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const fechaSubasta = '<%= subasta.fecha_subasta %>'; // Ejemplo: "Thu Jul 11 2024 00:00:00 GMT-0500 (hora estándar de Perú)"
        const horaSubasta = '<%= subasta.hora_subasta %>'; // Ejemplo: "14:30:00"

        // Duración de la subasta abierta después de la hora programada (en milisegundos)
        const duracionSubastaAbierta = 10 * 60 * 1000; // 10 minutos

        let horaCadaS; // Variable para almacenar el setInterval

        // Elementos del chat
        const chat = document.getElementById('chat');
        const progressBar = document.getElementById('progressBar');
        const messageInput = document.getElementById('messageInput');
        const menosButton = document.getElementById('menos');
        const masButton = document.getElementById('mas');
        const sendButton = document.getElementById('sendButton');

        // Función para parsear la fecha completa de subasta
        function parseFechaCompleta(fechaStr) {
          const cleanedDateStr = fechaStr.replace(/\sGMT.*$/, '');
          return new Date(cleanedDateStr);
        }

        // Función para calcular la fecha límite de la subasta abierta
        function calcularFechaLimiteSubasta(fechaSubasta, horaSubasta, duracionSubastaAbierta) {
          const [horas, minutos, segundos] = horaSubasta.split(':').map(Number);
          const fechaSubastaObjeto = parseFechaCompleta(fechaSubasta);
          fechaSubastaObjeto.setHours(horas, minutos, segundos, 0);
          return new Date(fechaSubastaObjeto.getTime() + duracionSubastaAbierta);
        }

        // Función para verificar el estado de la subasta y actualizar la interfaz del chat
        function actualizarEstadoSubasta() {
          const fechaActual = new Date();

          const { fechaSubastaObjeto, fechaLimiteSubasta } = calcularFechasSubasta();

          if (fechaActual < fechaSubastaObjeto) {
            // Subasta aún no ha comenzado
            progressBar.style.width = '0%';
            messageInput.disabled = true;
            menosButton.disabled = true;
            masButton.disabled = true;
            sendButton.disabled = true;
            console.log("Aún no ha comenzado la subasta.");
          } else if (fechaActual >= fechaSubastaObjeto && fechaActual <= fechaLimiteSubasta) {
            // Subasta abierta
            const tiempoTranscurrido = fechaActual - fechaSubastaObjeto;
            const progreso = (tiempoTranscurrido / duracionSubastaAbierta) * 100;
            progressBar.style.width = `${progreso}%`;
            messageInput.disabled = false;
            menosButton.disabled = true; // No se puede restar al comenzar la subasta
            masButton.disabled = true; // No se puede sumar al comenzar la subasta
            sendButton.disabled = true; // No se puede enviar pujas al comenzar la subasta
            console.log("La subasta está abierta. Puedes ver el chat pero no enviar pujas aún.");
          } else {
            // Subasta cerrada
            progressBar.style.width = '100%';
            messageInput.disabled = true;
            menosButton.disabled = true;
            masButton.disabled = true;
            sendButton.disabled = true;
            chat.classList.add('subasta-cerrada'); // Agregar clase para indicar visualmente que la subasta está cerrada
            console.log("La subasta ha cerrado.");
            clearInterval(horaCadaS); // Detener la actualización si la subasta ha cerrado
          }
        }

        // Función para inicializar y calcular las fechas de la subasta
        function calcularFechasSubasta() {
          const fechaSubastaObjeto = parseFechaCompleta(fechaSubasta);
          const fechaLimiteSubasta = calcularFechaLimiteSubasta(fechaSubasta, horaSubasta, duracionSubastaAbierta);
          return { fechaSubastaObjeto, fechaLimiteSubasta };
        }

        // Función para manejar el envío de pujas
        function enviarPuja() {
          // Aquí puedes implementar la lógica para enviar la puja
          console.log("Pujando...");
        }

        // Evento de clic para el botón de enviar
        sendButton.addEventListener('click', function (event) {
          if (chat.classList.contains('subasta-cerrada')) {
            // Evitar acción si la subasta está cerrada
            event.preventDefault();
            console.log("La subasta está cerrada. No se puede participar.");
          } else {
            // Lógica de enviar la puja
            enviarPuja();
          }
        });

        // Inicialización de la subasta
        function inicializarSubasta() {
          const { fechaSubastaObjeto, fechaLimiteSubasta } = calcularFechasSubasta();

          horaCadaS = setInterval(actualizarEstadoSubasta, 1000);

          // Mostrar la fecha de la subasta formateada
          const fechaSubastaFormateada = `${fechaSubastaObjeto.getDate()}/${fechaSubastaObjeto.getMonth() + 1}/${fechaSubastaObjeto.getFullYear()} ${horaSubasta}`;
          console.log("Fecha de la subasta es:", fechaSubastaFormateada);
        }

        inicializarSubasta();
      });

    </script>

    </script>










</body>

</html>